# This is a basic workflow to help you get started with Actions

name: Automated Drupal8 CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
    PHP_VERSION: 7.3
    COMPOSER_ALLOW_SUPERUSER: '1' # https://getcomposer.org/doc/03-cli.md#composer-allow-superuser

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-host:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3']
    env:
        extensions: xdebug
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
    - name: Verify MySQL connection from host
      run: |
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot -e "select @@hostname;show variables where Variable_name like '%host%';"
    - name: Check out the code 
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Set up PHP ${{ matrix.php_version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}
    - name: Install Composer dependencies
      run: composer install
  unit-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3']
    env:
        extensions: xdebug        
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
    - name: Check out the code 
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Set up PHP ${{ matrix.php_version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}
    - name: Verify MySQL connection from container 
      run: |
       sudo apt-get update
       sudo apt-get install -y mysql-client
       mysqladmin ping
       mysql --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot --protocol=tcp -e "CREATE DATABASE IF NOT EXISTS drupal8;"
       mysql --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot --protocol=tcp -e "SHOW DATABASES;USE drupal8; source ./scripts/database/dumps/drupal8.sql;"
       mysql --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot --protocol=tcp -e "USE drupal8; SHOW TABLES;"
    - name: Site Setup
      run: |
       composer --version
       composer validate
       composer install -n
       echo "export PATH=$PATH:$GITHUB_WORKSPACE/vendor/bin" >> ~/.bash_profile
       source ~/.bash_profile
       drush --version
       php -i | grep -w default_socket
       php -r 'phpinfo();' | grep -w default_socket
       drush st
       sudo rm -rf ./web/sites/default/settings.php
       sudo cp ./.github/config/settings.php ./web/sites/default/
       sudo cp ./.github/config/settings.local.php ./web/sites/default/
       sudo mkdir ./web/sites/default/simpletest
       sudo chmod 777 ./web/sites/default/simpletest
       sudo mkdir ./web/sites/default/files/report
       sudo chmod 777 ./web/sites/default/files/report
       drush cr
       drush st
       drush cim sync -y
       drush en simpletest
       drush cr
    - name: Run the code coverage and unit testing
      run: php vendor/phpunit/phpunit/phpunit --coverage-html ./web/sites/default/files/reports
    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: coverage
        path: coverage
      
