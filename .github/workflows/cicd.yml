# This is a basic workflow to help you get started with Actions

name: Automated Drupal8 CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "service"
  services:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3']
    # Enable the mysql services
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: root
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: d8_music
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Verify MySQL connection from host
        run: |
          sudo apt-get install -y mysql-client

  initiate-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3']
    container: ubuntu
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Check out the code 
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
  
    - name: Verify MySQL connection from container 
      run: |
        apt-get update
        apt-get install -y mysql-client
        mysql --host mysql -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS d8_music;"
        mysql --host mysql -uroot -ppassword -e "SHOW DATABASES"
        mysql --host mysql -uroot -ppassword d8_music < scripts/database/dumps/d8_music.sql
        mysql --host mysql -uroot -ppassword -e "USE d8_music; SHOW TABLES;"

  phpunit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.3']	
    container: ubuntu
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Check out the code 
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up PHP ${{ matrix.php_version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}

    - name: Verify MySQL connection from container 
      run: |
        apt-get update
        apt-get install -y mysql-client
        mysql --host mysql -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS d8_music;"
        mysql --host mysql -uroot -ppassword -e "SHOW DATABASES"
        mysql --host mysql -uroot -ppassword d8_music < scripts/database/dumps/d8_music.sql
        mysql --host mysql -uroot -ppassword -e "USE d8_music; SHOW TABLES;"

    - name: Install Composer dependencies
      run: |
        php -v
        composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
        drush st
        drush cim sync

    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    #- uses: actions/checkout@v2

    # Runs a single command using the runners shell
    #- name: Run a one-line script
    #  run: echo "Hello, world!"

    # Runs a set of commands using the runners shell
    #- name: Run a multi-line script
    #  run: |
    #    echo "Add other actions to build,"
    #    echo "test, and deploy your project."
